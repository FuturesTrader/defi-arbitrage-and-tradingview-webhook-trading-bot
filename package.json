{
  "name": "execute_trade_smart_contract_flashloanv15btccarb",
  "version": "1.0.0",
  "main": "index.js",
  "author": "FuturesTrader <rtgriggs@gmail.com>",
  "license": "MIT",
  "type": "module",
  "private": true,
  "scripts": {
    "build": "tsc",
    "testEnv": "tsx -r tsconfig-paths/register src/testEnv.ts",
    "testPool": "tsx -r tsconfig-paths/register src/testPool.ts",
    "findPool": "tsx -r tsconfig-paths/register src/findPool.ts",
    "findPools": "tsx -r tsconfig-paths/register src/findPool.ts",
    "findPools:avalanche": "tsx -r tsconfig-paths/register src/findPool.ts avalanche",
    "findPools:arbitrum": "tsx -r tsconfig-paths/register src/findPool.ts arbitrum",
    "testQuoterUniswap": "tsx -r tsconfig-paths/register src/testQuoterUniswap.ts",
    "testGas": "tsx -r tsconfig-paths/register src/testGas.ts",
    "testRouter": "tsx -r tsconfig-paths/register src/testRouter.ts",
    "mainUniswap": "tsx -r tsconfig-paths/register src/mainUniswap.ts",
    "testProvider": "tsx -r tsconfig-paths/register src/testProvider.ts",
    "mainJoe": "tsx -r tsconfig-paths/register src/mainJoe.ts",
    "mainArb": "tsx -r tsconfig-paths/register src/mainArbitrage.ts",
    "approveToken": "tsx -r tsconfig-paths/register src/approveTokens.ts",
    "testPoolArb": "tsx -r tsconfig-paths/register src/testPoolArb.ts",
    "testPoolJoe": "tsx -r tsconfig-paths/register src/testPoolTraderJoe.ts",
    "testQuoterJoe": "tsx -r tsconfig-paths/register src/testQuoterTraderJoe.ts",
    "testQuoterJoeTradeMethod": "tsx -r tsconfig-paths/register src/testQuoterTraderJoeTradeMethod.ts",
    "fundContract": "tsx -r tsconfig-paths/register scripts/fundContract.ts",
    "testMonitoring": "tsx -r tsconfig-paths/register src/testMonitoring.ts",
    "getBalance": "tsx -r tsconfig-paths/register scripts/getBalance.ts",
    "configureFlashLoans": "tsx -r tsconfig-paths/register scripts/configureFlashLoans.ts",
    "updateQuoteMaxAge": "tsx -r tsconfig-paths/register scripts/updateQuoteMaxAge.ts",
    "getQuoteMaxAge": "tsx -r tsconfig-paths/register scripts/getQuoteMaxAge.ts",
    "testTimestamps": "tsx -r tsconfig-paths/register src/testTimestamps.ts",
    "configureMinProfitBps": "tsx -r tsconfig-paths/register scripts/configureMinProfitBps.ts",
    "decodeTransaction": "tsx -r tsconfig-paths/register scripts/decodeTransaction.ts",
    "traceTransaction": "tsx -r tsconfig-paths/register src/traceTransaction.ts",
    "printTraderJoeQuote": "tsx -r tsconfig-paths/register scripts/testSingleSwap.ts traderjoe USDCtoWAVAX 1 first --debug",
    "emergencyWithdrawUSDC": "tsx -r tsconfig-paths/register scripts/emergencyWithdraw.ts USDC",
    "emergencyWithdrawWAVAX": "tsx -r tsconfig-paths/register scripts/emergencyWithdraw.ts WAVAX",
    "emergencyWithdrawWBTC": "tsx -r tsconfig-paths/register scripts/emergencyWithdraw.ts WBTC",
    "testArbitrageFlashLoan1": "tsx -r tsconfig-paths/register scripts/testFlashLoanArbitrage.ts traderjoe-to-uniswap 1 wavax",
    "testArbitrageFlashLoan2": "tsx -r tsconfig-paths/register scripts/testFlashLoanArbitrage.ts uniswap-to-traderjoe 1 wavax",
    "testArbitrageFlashLoan3": "tsx -r tsconfig-paths/register scripts/testFlashLoanArbitrage.ts traderjoe-to-uniswap 1 wbtc",
    "testArbitrageFlashLoan4": "tsx -r tsconfig-paths/register scripts/testFlashLoanArbitrage.ts uniswap-to-traderjoe 1 wbtc",
    "wavaxPrice": "tsx -r tsconfig-paths/register src/wavaxPriceQuoter.ts",
    "runDataCollection": "tsx -r tsconfig-paths/register src/runDataCollection",
    "analyzeData": "tsx -r tsconfig-paths/register src/analyzeQuoteAccuracy.ts --data-dir=./trade_data/raw_trades --output=./analysis_results --csv --json",
    "analyzeFlashLoanData": "tsx -r tsconfig-paths/register src/analyzeQuoteAccuracyFlashLoan.ts",
    "getDetailTransaction": "tsx -r tsconfig-paths/register src/getDetailTransactions.ts 0x900fe558d892879884ef3ce89df01fdcb32b40f9604e56defedf5115115fb972",
    "pauseContract": "tsx -r tsconfig-paths/register scripts/pauseUnPauseContract.ts pause",
    "unpauseContract": "tsx -r tsconfig-paths/register scripts/pauseUnPauseContract.ts unpause",
    "getUniswapQuoteWBTC": "tsx -r tsconfig-paths/register src/quoterUniswap.ts 'WBTC->USDC' .1",
    "getUniswapQuoteWAVAX": "tsx -r tsconfig-paths/register src/quoterUniswap.ts 'WAVAX->USDC' 1",
    "getTraderJoeQuoteWBTC": "tsx -r tsconfig-paths/register src/quoterTraderJoe.ts 'WBTC->USDC' 1",
    "getTraderJoeQuoteWAVAX": "tsx -r tsconfig-paths/register src/quoterTraderJoe.ts 'WAVAX->USDC' 1",
    "trade:buy-btc": "tsx -r tsconfig-paths/register src/mainUniswap.ts USDC_TO_WBTC --amount=15",
    "trade:sell-btc": "tsx -r tsconfig-paths/register src/mainUniswap.ts WBTC_TO_USDC --percentage=100",
    "trade:sell-wavax": "tsx -r tsconfig-paths/register src/mainUniswap.ts WAVAX_TO_USDC --balance",
    "trade:buy-wavax": "tsx -r tsconfig-paths/register src/mainUniswap.ts USDC_TO_WAVAX --amount=25",
    "webhook": "tsx -r tsconfig-paths/register src/basicWebhookServer.ts",
    "webhook:dev": "nodemon --exec tsx -r tsconfig-paths/register src/webhookServer.ts",
    "webhook:test": "bash webhook-scripts.sh test",
    "webhook:live": "bash webhook-scripts.sh live",
    "webhook:status": "bash webhook-scripts.sh status",
    "webhook:switch-test": "bash webhook-scripts.sh switch-test",
    "webhook:test-webhook": "bash webhook-scripts.sh test-webhook",
    "webhook:logs": "bash webhook-scripts.sh logs",
    "webhook:monitor": "bash webhook-scripts.sh monitor",
    "webhook:ngrok": "bash webhook-scripts.sh ngrok",
    "webhook:help": "bash webhook-scripts.sh help",
    "webhook:minimal": "tsx -r tsconfig-paths/register src/testServer.ts",
    "webhook:test-express": "tsx -r tsconfig-paths/register src/testServer.ts",
    "webhook:express5": "tsx -r tsconfig-paths/register src/webhookServer.ts",
    "webhook:no-middleware": "ENABLE_CORS=false ENABLE_HELMET=false ENABLE_RATE_LIMIT=false tsx src/webhookServer.ts",
    "webhook:basic": "tsx -r tsconfig-paths/register src/basicWebhookServer.ts",
    "webhook:start": "tsx -r tsconfig-paths/register src/basicWebhookServer.ts",
    "webhook:stop": "pkill -f 'tsx -r tsconfig-paths/register src/basicWebhookServer.ts'",
    "webhook:restart": "yarn webhook:stop && sleep 2 && yarn webhook:start",
    "webhook:status-check": "lsof -i :3001",
    "ngrok": "ngrok http --domain=autobot.ngrok.dev 3001",
    "webhook:full": "concurrently \"yarn webhook\" \"yarn ngrok\"",
    "tradeReport": "tsx -r tsconfig-paths/register src/tradeReporting.ts",
    "reports:manual": "tsx -e \"import('./src/tradeReporting.ts').then(async m => { const files = await m.tradeReporting.generateFullReport({ includeActiveTrades: true }); console.log('Generated reports:', files); })\"",
    "reports:daily": "tsx -e \"import('./src/tradeReporting.ts').then(async m => { const files = await m.tradeReporting.generateDailyReport(); console.log('Daily reports:', files); })\"",
    "reports:weekly": "tsx -e \"import('./src/tradeReporting.ts').then(async m => { const files = await m.tradeReporting.generateWeeklyReport(); console.log('Weekly reports:', files); })\"",
    "reports:profit": "tsx -e \"import('./src/tradeReporting.ts').then(async m => { const file = await m.tradeReporting.generateProfitReport(0.10); console.log('Profit report:', file); })\"",
    "reports:summary": "tsx -e \"import('./src/tradeTracker.ts').then(m => console.log('Summary:', JSON.stringify(m.tradeTracker.getTradeSummary(), null, 2)))\"",
    "reports:status": "tsx -e \"console.log('Active:', require('fs').existsSync('data/trades/trades_active.json')); console.log('Completed:', require('fs').existsSync('data/trades/trades_completed.json')); console.log('Summary:', require('fs').existsSync('data/trades/trades_summary.json'));\"",
    "reports:open": "open data/reports || explorer data/reports || xdg-open data/reports",
    "reports:list": "ls -la data/reports/*.csv 2>/dev/null || echo 'No CSV files found'",
    "reports:clean": "rm -f data/reports/*.csv && echo 'CSV reports cleaned'",
    "reports:generate": "tsx scripts/generateReports.ts",
    "debugTradeData": "tsx scripts/debugTradeData.ts",
    "migrateTradeData": "tsx scripts/migrateTradeData.ts recalculate",
    "parseHistoricalData": "tsx scripts/parseHistoricalData.ts",
    "fixGasCosts": "tsx scripts/fixGasCosts.ts",
    "trade:list": "tsx -r tsconfig-paths/register scripts/tradeManagement.ts list",
    "trade:remove": "tsx -r tsconfig-paths/register scripts/tradeManagement.ts remove",
    "trade:summary": "tsx -r tsconfig-paths/register scripts/tradeManagement.ts summary",
    "trade:recalculate": "tsx -r tsconfig-paths/register scripts/tradeManagement.ts recalculate",
    "trade:help": "tsx -r tsconfig-paths/register scripts/tradeManagement.ts help",
    "trade:active": "tsx -r tsconfig-paths/register scripts/tradeManagement.ts active",
    "trade:clear-active": "tsx -r tsconfig-paths/register scripts/tradeManagement.ts clear-active",
    "trade:clear-preview": "tsx -r tsconfig-paths/register scripts/tradeManagement.ts clear-active-preview",
    "_comment_avalanche": "// Avalanche-specific trading commands (explicit network)",
    "trade:ava:buy-btc": "tsx -r tsconfig-paths/register src/mainUniswap.ts USDC_TO_WBTC --amount=15 --network=AVALANCHE",
    "trade:ava:sell-btc": "tsx -r tsconfig-paths/register src/mainUniswap.ts WBTC_TO_USDC --percentage=100 --network=AVALANCHE",
    "trade:ava:buy-avax": "tsx -r tsconfig-paths/register src/mainUniswap.ts USDC_TO_WAVAX --amount=15 --network=AVALANCHE",
    "trade:ava:sell-avax": "tsx -r tsconfig-paths/register src/mainUniswap.ts WAVAX_TO_USDC --percentage=100 --network=AVALANCHE",
    "_comment_arbitrum": "// Arbitrum-specific trading commands",
    "trade:arb:buy-btc": "tsx -r tsconfig-paths/register src/mainUniswap.ts USDC_TO_WBTC_ARB --amount=15 --network=ARBITRUM",
    "trade:arb:sell-btc": "tsx -r tsconfig-paths/register src/mainUniswap.ts WBTC_TO_USDC_ARB --percentage=100 --network=ARBITRUM",
    "trade:arb:buy-eth": "tsx -r tsconfig-paths/register src/mainUniswap.ts USDC_TO_WETH --amount=15 --network=ARBITRUM",
    "trade:arb:sell-eth": "tsx -r tsconfig-paths/register src/mainUniswap.ts WETH_TO_USDC --percentage=100 --network=ARBITRUM",
    "_comment_setup": "// Trading setup and validation commands",
    "setup:arbitrum": "tsx -r tsconfig-paths/register setupArbitrumTrading.ts",
    "setup:arbitrum:allowances": "tsx -r tsconfig-paths/register setupArbitrumTrading.ts --set-allowances",
    "setup:check-balances": "tsx -r tsconfig-paths/register setupArbitrumTrading.ts --check-only",
    "_comment_test_trades": "// Safe test trading commands (small amounts)",
    "test:ava:buy-btc-small": "tsx -r tsconfig-paths/register src/mainUniswap.ts USDC_TO_WBTC --amount=1 --network=AVALANCHE",
    "test:ava:sell-btc-small": "tsx -r tsconfig-paths/register src/mainUniswap.ts WBTC_TO_USDC --amount=0.00001 --network=AVALANCHE",
    "test:ava:buy-avax-small": "tsx -r tsconfig-paths/register src/mainUniswap.ts USDC_TO_WAVAX --amount=1 --network=AVALANCHE",
    "test:ava:sell-avax-small": "tsx -r tsconfig-paths/register src/mainUniswap.ts WAVAX_TO_USDC --amount=0.001 --network=AVALANCHE",
    "test:arb:buy-btc-small": "tsx -r tsconfig-paths/register src/mainUniswap.ts USDC_TO_WBTC_ARB --amount=1 --network=ARBITRUM",
    "test:arb:sell-btc-small": "tsx -r tsconfig-paths/register src/mainUniswap.ts WBTC_TO_USDC_ARB --amount=0.00001 --network=ARBITRUM",
    "test:arb:buy-eth-small": "tsx -r tsconfig-paths/register src/mainUniswap.ts USDC_TO_WETH --amount=1 --network=ARBITRUM",
    "test:arb:sell-eth-small": "tsx -r tsconfig-paths/register src/mainUniswap.ts WETH_TO_USDC --amount=0.001 --network=ARBITRUM",
    "_comment_network_quotes": "// Network-specific quote commands",
    "quote:ava:usdc-btc": "tsx -r tsconfig-paths/register src/quoterUniswap.ts 'USDC->WBTC' 1 --network=AVALANCHE",
    "quote:ava:btc-usdc": "tsx -r tsconfig-paths/register src/quoterUniswap.ts 'WBTC->USDC' 0.0001 --network=AVALANCHE",
    "quote:ava:usdc-avax": "tsx -r tsconfig-paths/register src/quoterUniswap.ts 'USDC->WAVAX' 1 --network=AVALANCHE",
    "quote:ava:avax-usdc": "tsx -r tsconfig-paths/register src/quoterUniswap.ts 'WAVAX->USDC' 0.1 --network=AVALANCHE",
    "quote:arb:usdc-btc": "tsx -r tsconfig-paths/register src/quoterUniswap.ts 'USDC->WBTC' 1 --network=ARBITRUM",
    "quote:arb:btc-usdc": "tsx -r tsconfig-paths/register src/quoterUniswap.ts 'WBTC->USDC' 0.0001 --network=ARBITRUM",
    "quote:arb:usdc-eth": "tsx -r tsconfig-paths/register src/quoterUniswap.ts 'USDC->WETH' 1 --network=ARBITRUM",
    "quote:arb:eth-usdc": "tsx -r tsconfig-paths/register src/quoterUniswap.ts 'WETH->USDC' 0.001 --network=ARBITRUM",
    "arbWalletBalance": "tsx -r tsconfig-paths/register scripts/setupArbitrumTrading.ts",
    "arbWalletSetup": "tsx -r tsconfig-paths/register scripts/setupArbitrumTrading.ts --set-allowances",
    "test:weth-price": "tsx -r tsconfig-paths/register src/wethPriceQuoter.ts"
  },
  "resolutions": {
    "jsbi": "3.2.0"
  },
  "devDependencies": {
    "@types/cors": "^2.8.18",
    "@types/express": "^5.0.2",
    "@types/node": "^22.10.2",
    "@types/winston": "^2.4.4",
    "@typescript-eslint/eslint-plugin": "^8.18.0",
    "@typescript-eslint/parser": "^8.18.0",
    "eslint": "^9.16.0",
    "nodemon": "^3.1.10",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "tsx": "^4.19.2",
    "typescript": "^5.7.2"
  },
  "dependencies": {
    "@openzeppelin/contracts": "5.4.0",
    "@traderjoe-xyz/sdk": "^5.0.2",
    "@traderjoe-xyz/sdk-core": "^2.0.2",
    "@traderjoe-xyz/sdk-v2": "^3.0.14",
    "@uniswap/sdk-core": "^6.1.1",
    "@uniswap/smart-order-router": "^4.9.2",
    "@uniswap/v3-sdk": "^3.19.0",
    "@uniswap/v3-staker": "1.0.1",
    "@wagmi/core": "^2.16.0",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "5.1.0",
    "express-rate-limit": "^7.5.0",
    "hardhat": "^2.0.0",
    "helmet": "^8.1.0",
    "path-to-regexp": "8.2.0",
    "rimraf": "^6.0.1",
    "viem": "2.x",
    "winston": "^3.17.0",
    "winston-daily-rotate-file": "^5.0.0"
  },
  "engines": {
    "node": ">=23.8.0"
  },
  "packageManager": "yarn@4.6.0"
}
