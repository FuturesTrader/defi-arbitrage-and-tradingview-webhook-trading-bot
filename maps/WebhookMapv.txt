# T3 Trading Strategy Webhook Flow

## 📊 Complete System Flow: TradingView signal → Tradingview Alert JSON webhook Formats (Custom bot, Hummingbot  Octobot, Coinrule) → Ngrok Webhook Tunnel →  Trade Execution

```
┌─────────────────────────────────────────────────────────────────────────────┐
│                         T3 TRADING STRATEGY WEBHOOK FLOW                    │
└─────────────────────────────────────────────────────────────────────────────┘
```

## 1️⃣ **SIGNAL GENERATION LAYER**

```
┌─────────────────────────────────────────────────────────────────┐
│           📈 TradingView - T3 Trading Strategy                  │
│                                                                 │
│  File: T3TradingStrategy_V36Q_Hummingbot.txt                    │
│  Purpose: Generate trading signals based on T3 indicator        │
│                                                                 │
│  Components:                                                    │
│  • T3 Moving Average calculation (6 EMAs)                       │
│  • Volume Factor adjustment (0.7 default)                       │
│  • Smart Value Detection for micro-value tokens                 │
│  • Signal generation methods                                    │
└─────────────────────────────────────────────────────────────────┘
                              │
                              ▼
```

## 2️⃣ **SIGNAL DETECTION METHODS**

```
┌─────────────────────────────────────────────────────────────────┐
│                    Signal Detection Methods                     │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌──────────────┐   ┌──────────────┐   ┌──────────────┐         │
│  │   Pattern    │   │    Slope     │   │  Crossover   │         │
│  │   Trigger    │   │    Change    │   │              │         │
│  ├──────────────┤   ├──────────────┤   ├──────────────┤         │
│  │ Detects      │   │ Monitors T3  │   │ Tracks when  │         │
│  │ consecutive  │   │ slope        │   │ price crosses│         │
│  │ up/down bars │   │ direction    │   │ T3 line      │         │
│  │ patterns     │   │ changes      │   │              │         │
│  └──────────────┘   └──────────────┘   └──────────────┘         │
│                                                                 │
│  Signal Types Generated:                                        │
│  • Long Signal (BUY)                                            │
│  • Short Signal (SELL)                                          │
│  • Stop Loss triggers (T3 Slope Change SL)                      │
│  • Take Profit triggers (Renko Brick TP)                        │
└─────────────────────────────────────────────────────────────────┘
                              │
                              ▼
```

## 3️⃣ **ALERT GENERATION**

```
┌─────────────────────────────────────────────────────────────────┐
│                 🔔 Alert JSON Generation                        │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  Function: getHummingbotAlert(action, pool_type)                │
│                                                                 │
│  JSON Payload Structure:                                        │
│  {                                                              │
│    "api_key": "your_api_key_here",                              │
│    "action": "BUY" | "SELL",                                    │
│    "symbol": "BTCUSDC",        // Converted from BTC/USDC       │
│    "exchange": "uniswap",      // Lowercase                     │
│    "network": "arbitrum",      // or "avalanche"                │
│    "pool_type": "amm" | "clmm" // Optional                      │
│  }                                                              │
│                                                                 │
│  Alert Messages:                                                │
│  • longAlertMessage  → BUY action                               │
│  • sellAlertMessage  → SELL action                              │
│  • slAlertMessage    → Stop Loss (SELL)                         │
│  • tpAlertMessage    → Take Profit (SELL)                       │
└─────────────────────────────────────────────────────────────────┘
                              │
                              ▼
                        [HTTPS POST]
                              │
                              ▼
```

## 4️⃣ **WEBHOOK RECEPTION**

```
┌─────────────────────────────────────────────────────────────────┐
│              🌐 Webhook Server (basicWebhookServer.ts)          │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  Endpoint: POST /webhook/tradingview                            │
│  Port: 3001 (exposed via ngrok)                                 │
│  Version: 9.1.0-stable                                          │
│                                                                 │
│  Initial Processing:                                            │
│  1. Generate webhookId: webhook_{timestamp}_{random}            │
│  2. Capture signal timestamp                                    │
│  3. Log incoming webhook with headers                           │
│  4. IMMEDIATE 200 OK response (prevents timeout)                │
│                                                                 │
│  Response Structure:                                            │
│  {                                                              │
│    "message": "Network-aware webhook received",                 │
│    "webhookId": "webhook_1234567890_abc12",                     │
│    "network": "ARBITRUM",                                       │
│    "networkName": "Arbitrum One",                               │
│    "tradeDirection": "BUY",                                     │
│    "status": "processing",                                      │
│    "estimatedCompletion": "2025-01-15T10:30:00Z"                │
│  }                                                              │
└─────────────────────────────────────────────────────────────────┘
                              │
                              ▼
```

## 5️⃣ **VALIDATION & SECURITY**

```
┌─────────────────────────────────────────────────────────────────┐
│                    🔐 Validation & Security                     │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  Function: validateNetworkAwareWebhookData()                    │
│                                                                 │
│  Validation Steps:                                              │
│  ┌────────────────────────────────────────┐                     │
│  │ 1. API Key Validation                  │                     │
│  │    • Check header: X-Webhook-Secret    │                     │
│  │    • Or body field: secret             │                     │
│  │    • Compare with CONFIG.SECRET_KEY    │                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │
│  │ 2. Network Detection                   │                     │
│  │    • Check "network" field             │                     │
│  │    • Validate: AVALANCHE or ARBITRUM   │                     │
│  │    • Fallback to CONFIG.DEFAULT_NETWORK│                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │
│  │ 3. Trade Direction Validation          │                     │
│  │    • Parse "action" or "side" field    │                     │
│  │    • Map to: BUY or SELL               │                     │
│  │    • Validate product/symbol format    │                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │ 
│  │ 4. Security Checks                     │                     │
│  │    • Rate limiting                     │                     │
│  │    • Request size limits               │                     │
│  │    • User-agent validation             │                     │
│  └────────────────────────────────────────┘                     │
└─────────────────────────────────────────────────────────────────┘
                              │
                              ▼
```

## 6️⃣ **ASYNCHRONOUS PROCESSING**

```
┌─────────────────────────────────────────────────────────────────┐
│           ⚡ Asynchronous Trade Processing                      │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  Function: processNetworkAwareWebhookAsync()                    │
│                                                                 │
│  Parameters:                                                    │
│  • networkKey: 'AVALANCHE' | 'ARBITRUM'                         │
│  • webhookData: WebhookTradeData object                         │
│  • tradeDirection: 'BUY' | 'SELL'                               │
│  • webhookId: Unique identifier                                 │
│  • signalTimestamp: Unix timestamp                              │
│                                                                 │
│  Processing Flow:                                               │
│  ┌────────────────────────────────────────┐                     │
│  │ 1. Set 5-minute timeout timer          │                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │
│  │ 2. Create network context              │                     │
│  │    • Load network configuration        │                     │
│  │    • Set RPC endpoints                 │                     │
│  │    • Configure gas settings            │                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │
│  │ 3. Error handling wrapper              │                     │
│  │    • Try/catch blocks                  │                     │
│  │    • Graceful degradation              │                     │
│  │    • Error notification system         │                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │
│  │ 4. Execute trade (async)               │                     │
│  │    • Call executeNetworkAwareTrade()   │                     │
│  │    • Monitor execution                 │                     │
│  │    • Handle timeouts                   │                     │
│  └────────────────────────────────────────┘                     │
└─────────────────────────────────────────────────────────────────┘
                              │
                              ▼
```

## 7️⃣ **TRADE EXECUTION**

```
┌─────────────────────────────────────────────────────────────────┐
│              💱 Trade Execution (mainUniswap.ts)                │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  Function: executeTradeWithTracking()                           │
│                                                                 │
│  Execution Steps:                                               │
│                                                                 │
│  ┌────────────────────────────────────────┐                     │
│  │ 1. Pre-Trade Setup                     │                     │
│  │    • Get wallet/signer                 │                     │
│  │    • Check balances                    │                     │
│  │    • Calculate trade amounts           │                     │
│  │    • Set slippage tolerance (0.5%)     │                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │
│  │ 2. Uniswap V3 Integration              │                     │
│  │    • Get pool contract                 │                     │
│  │    • Fetch current price               │                     │
│  │    • Calculate optimal route           │                     │
│  │    • Prepare swap parameters           │                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │
│  │ 3. Token Approval                      │                     │
│  │    • Check current allowance           │                     │
│  │    • Approve if necessary              │                     │
│  │    • Wait for confirmation             │                     │
│  │    • Verify approval success           │                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │
│  │ 4. Execute Swap                        │                     │
│  │    • Nonce management (critical!)      │                     │
│  │    • Gas price optimization            │                     │
│  │    • Submit transaction                │                     │
│  │    • Monitor for confirmation          │                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │
│  │ 5. Post-Trade Processing               │                     │
│  │    • Verify execution                  │                     │
│  │    • Calculate actual amounts          │                     │
│  │    • Log transaction hash              │                     │
│  │    • Update balances                   │                     │
│  └────────────────────────────────────────┘                     │
│                                                                 │
│  Network-Specific Features:                                     │
│  • AVALANCHE: WAVAX gas, higher security                        │
│  • ARBITRUM: ETH gas, lower fees, L2 optimizations              │
└─────────────────────────────────────────────────────────────────┘
                              │
                              ▼
```

## 8️⃣ **TRADE TRACKING & REPORTING**

```
┌─────────────────────────────────────────────────────────────────┐
│           📊 Trade Tracking & Reporting System                  │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  Components:                                                    │
│  • tradeTracker.ts - Trade pair matching                        │
│  • tradeReporting.ts - Report generation                        │
│  • generateReports.ts - CSV export                              │
│                                                                 │
│  ┌────────────────────────────────────────┐                     │
│  │ Trade Tracking (tradeTracker.ts)       │                     │
│  ├────────────────────────────────────────┤                     │
│  │ • Generate unique trade IDs            │                     │
│  │ • Match BUY/SELL pairs                 │                     │
│  │ • Track open positions                 │                     │
│  │ • Monitor P&L in real-time             │                     │
│  │ • Store trade metadata                 │                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │
│  │ Data Storage                           │                     │
│  ├────────────────────────────────────────┤                     │
│  │ Directory Structure:                   │                     │
│  │ /data/trades/                          │                     │
│  │   ├── pending_trades.json              │                     │
│  │   ├── completed_trades.json            │                     │
│  │   └── trade_history.json               │                     │
│  │ /data/reports/                         │                     │
│  │   └── trade_report_{date}.csv          │                     │
│  └────────────────────────────────────────┘                     │
│                      ▼                                          │
│  ┌────────────────────────────────────────┐                     │
│  │ Report Generation                      │                     │
│  ├────────────────────────────────────────┤                     │
│  │ CSV Columns (84 total):                │                     │
│  │ • Network & Network_Name               │                     │
│  │ • Entry/Exit dates & signals           │                     │
│  │ • Trade amounts & profits              │                     │
│  │ • Gas costs & efficiency               │                     │
│  │ • Transaction hashes                   │                     │
│  │ • Pool addresses & fees                │                     │
│  │ • Slippage & price impact              │                     │
│  └────────────────────────────────────────┘                     │
└─────────────────────────────────────────────────────────────────┘
                              │
                              ▼
```

## 9️⃣ **COMPLETION & READY STATE**

```
┌─────────────────────────────────────────────────────────────────┐
│                    ✅ Trade Complete                            │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  Final Actions:                                                 │
│                                                                 │
│  1. Transaction Confirmation                                    │
│     • Verify on blockchain                                      │
│     • Log transaction hash                                      │
│     • Update trade status                                       │
│                                                                 │
│  2. Data Persistence                                            │
│     • Save to completed_trades.json                             │
│     • Update CSV report                                         │
│     • Archive webhook data                                      │
│                                                                 │
│  3. Notifications                                               │
│     • Log success message                                       │
│     • Update monitoring dashboard                               │
│     • Send alerts if configured                                 │
│                                                                 │
│  4. System Reset                                                │
│     • Clear timeout timers                                      │
│     • Reset nonce manager                                       │
│     • Ready for next webhook                                    │
│                                                                 │
│  Success Metrics:                                               │
│  • Trade ID: trade_1234567890_BUY_ARBITRUM                      │
│  • Execution time: ~15-30 seconds                               │
│  • Gas efficiency: >95%                                         │
│  • Slippage: <0.5%                                              │
└─────────────────────────────────────────────────────────────────┘
```

## 🔄 **ERROR HANDLING FLOW**

```
┌─────────────────────────────────────────────────────────────────┐
│                    ⚠️ Error Handling Flow                       │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  Error Types & Recovery:                                        │
│                                                                 │
│  1. Validation Errors → Return 400 Bad Request                  │
│  2. Auth Errors → Return 401 Unauthorized                       │
│  3. Network Errors → Retry with exponential backoff             │
│  4. Nonce Errors → Force refresh & retry                        │
│  5. Insufficient Balance → Log & skip trade                     │
│  6. Slippage Exceeded → Adjust & retry once                     │
│  7. Timeout → Log timeout, mark as failed                       │
│                                                                 │
│  All errors are:                                                │
│  • Logged to /logs/webhooks-{date}.log                          │
│  • Handled gracefully (server continues)                        │
│  • Reported in monitoring dashboard                             │
│  • Never crash the server                                       │
└─────────────────────────────────────────────────────────────────┘
```

## 📋 **KEY FEATURES SUMMARY**

```
┌─────────────────────────────────────────────────────────────────┐
│                       System Capabilities                       │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ✅ Multi-Network Support                                       │
│     • Avalanche C-Chain (L1)                                    │
│     • Arbitrum One (L2)                                         │
│     • Automatic network detection                               │
│                                                                 │
│  ✅ Hummingbot Integration                                      │
│     • Native JSON format support                                │
│     • API key authentication                                    │
│     • Pool type configuration (AMM/CLMM)                        │
│                                                                 │
│  ✅ Real-Time Tracking                                          │
│     • Live P&L calculation                                      │
│     • Position monitoring                                       │
│     • Trade pair matching                                       │
│                                                                 │
│  ✅ Automated Reporting                                         │
│     • CSV generation (84 columns)                               │
│     • JSON data storage                                         │
│     • Historical analysis                                       │
│                                                                 │
│  ✅ Production Stability                                        │
│     • v9.1.0-stable                                             │
│     • Comprehensive error handling                              │
│     • No server crashes                                         │
│     • Concurrent webhook support                                │
│     • Nonce management system                                   │
└─────────────────────────────────────────────────────────────────┘
```

## 🚀 **SYSTEM FLOW SUMMARY**

```
TradingView Signal → JSON Tradinview Alert → Webhook POST to Ngrok 
    → Ngrok local tunnel, Key validation, Async Processing → Trade Execution → Blockchain Transaction 
    → Trade Tracking → Report Generation → Ready for Next Signal

Total Processing Time: ~15-30 seconds per trade
Success Rate Target: >99%
Supported Volume: Multiple concurrent webhooks
Network Latency: <100ms (local) | <500ms (remote)
```
