sequenceDiagram
    participant Main as mainArbitrage.ts
    participant Price as priceMonitorService.ts
    participant Arb as arbitrageService.ts
    participant Smart as smartContractService.ts
    participant Contract as Smart Contract
    participant DEX1 as Uniswap
    participant DEX2 as TraderJoe

    Main->>Price: Start monitoring
    Price->>DEX1: Get USDC/WAVAX quote
    Price->>DEX2: Get WAVAX/USDC quote
    Price->>Price: Calculate potential profit
    Price-->>Main: Return arbitrage opportunity

    Main->>Arb: executeAtomicArbitrage()
    Arb->>Arb: Validate configuration
    Arb->>Arb: Check market conditions
    Arb->>Smart: Execute arbitrage

    Smart->>Smart: Prepare swap parameters
    Smart->>Smart: Calculate gas parameters
    Smart->>Contract: executeArbitrage()
    
    Contract->>DEX1: First swap (USDC->WAVAX)
    Contract->>DEX2: Second swap (WAVAX->USDC)
    Contract-->>Smart: Emit ArbitrageExecuted event
    
    Smart-->>Arb: Return trade result
    Arb-->>Main: Update metrics and log result